class Pair{
    
 int row;
 int col;
    
    Pair(int r , int c){
        row = r;
        col = c;
    }      
}

class Solution {
    
    int [] x = {0, 0, -1, 1};
    int []y = {1, -1, 0, 0};
    public int shortestBridge(int[][] grid) {
     
        boolean vis [][] = new boolean [grid.length][grid[0].length];
        LinkedList<Pair> queue = new LinkedList<>();
        boolean flag = false;
        
        for(int i=0;i<grid.length && !flag ; i++){
            for(int j=0;j<grid[0].length && !flag; j++){
                
                if(grid[i][j] == 1){
                    dfs(grid , vis, queue, i , j);
                    flag = true;
                }
            }
        }
        
       int level = 0; 
        while(queue.size() > 0){
            int size = queue.size();
            while(size --> 0){
                
                Pair p  = queue.poll();
                
            for(int i=0;i<4;i++){
            int row = p.row + x[i];
            int col = p.col + y[i];
            
            if(row < 0 || col < 0 || row >= grid.length || col >= grid[0].length ||
               vis[row][col] ) continue;
            
                
            if(grid[row][col] == 1) return level;
            queue.add(new Pair(row, col));
            vis[row][col] = true;
          
        }
            } level++;
        }
        
        return -1;
    }
    
    void dfs(int [][] grid , boolean [][] vis, LinkedList<Pair> q, int r, int c){
        
        vis[r][c] = true;
         q.add(new Pair(r,c));
        for(int i=0;i<4;i++){
            int row = r + x[i];
            int col = c + y[i];
            
            if(row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || 
               vis[row][col] || grid[row][col] == 0) continue;
            
           dfs(grid, vis, q, row, col);
           
        }
        
    }
}
