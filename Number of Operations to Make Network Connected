class Solution {
    public int makeConnected(int n, int[][] connections) {
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(n);
        boolean vis[] = new boolean[n];
        int c = 0;
        int e = connections.length;
        int r_e = 0;
        
        for(int i=0;i<n;i++){
            ArrayList<Integer> al = new ArrayList<>();
             adj.add(al);
            adj.get(i).add(i);
        }
        
        for(int i=0;i<connections.length;i++){
            adj.get(connections[i][0]).add(connections[i][1]);
            adj.get(connections[i][1]).add(connections[i][0]);
        }
        
       
        
        for(int i=0;i<n;i++){
            if(vis[i] == false){
                
                dfs(adj, vis, i);
        
                c++;
                
            }
        }
        
    
        r_e = e - ((n-1) - (c-1));
        
        if( e < (n-1)) return -1;
        else if(r_e >= (c-1)) return c-1;
        else return -1;
        
        
    }
    void dfs(ArrayList<ArrayList<Integer>> adj, boolean [] vis, int v){
        
        vis[v] = true;
        
        Iterator itr = adj.get(v).iterator();
        
        while(itr.hasNext()){
           int t = (int)itr.next();
            if(!vis[t]){
                dfs(adj, vis, t);
            }
        }
        
    }
}
